{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [

    // Serve frontend with backend - use for frontend debug with watch
    {
      /*
      First it calls a task which starts the backend server, and then compiles the frontend with watch and serves it on localhost:4200 (i.e. a local server that serves up the Angular SPA is started listening to port 4200). Note: proxy.conf is configured in angular.json to route api requests (e.g. those headed api-v1) to the backend server.  Thus you need to start the backend server in advance to handle the api requests.
      Second, once the task ends, this launches Chrome.
      For debug, you may need to use Chrome DevTools sources to put in the first breakpoint, which should then sync with VSCode.
      Close all open Chrome instances if Chrome won't start. */
      "name": "Serve frontend with backend",
      "type": "chrome",
      "preLaunchTask": "Serve Frontend with Backend",
      "postDebugTask": "Taskkill node.exe",
      "request": "launch",
      "cwd": "${workspaceFolder}/frontend",
      "url": "http://localhost:4200/", // proxy to 8080 for api calls
      "webRoot": "${workspaceFolder}/frontend/dist",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*":   "${workspaceFolder}/frontend/*",
      },
    },
    // Test frontend- use for frontend unit test debug with watch
    {
      /*
      Runs 'Test Frontend' task first, i.e. 'ng test:dev', which compiles and serves the front end and opens Chrome and connects to the Karma runner and runs the unit tests.  Once this task exits without error, following the test run, it THEN starts Chrome again and connects to the Karma runner for a second test run.  Debug should work on the second session.
      You may need to use Chrome DevTools sources to put in the first breakpoint.
      Run the preLaunch task manually first if problems.
      Close all open Chrome instances if Chrome won't start.
       */
      "name": "Test frontend",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "Test Frontend",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--incognito",
        "--new-window",
        "--start-maximized",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "cwd": "${workspaceFolder}/frontend",
      "userDataDir":true,
      "url": "http://localhost:9876/debug.html",
      "webRoot": "${workspaceFolder}/frontend/dist/",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*":   "${workspaceFolder}/frontend/*",
      },
      "sourceMaps": true,
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "breakOnLoad": true,
      "breakOnLoadStrategy": "instrument",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // e2e frontend with backend - use for frontend e2e test debug
    {
      /**
      Starts the server and runs e2e tests against it allowing VSCode debug of the e2e .spec files. (Use Chrome DevTools if browser-side debug is needed)
      NOTE: Protractor uses a configured baseUrl to point all url requests to a host.  My frontend SPA routes any backend calls to the same host with an added path (e.g. /api-v1). This does NOT use a proxy to redirect the backend calls, as ng e2e does, so the server that protractor poinys to must both serve the SPA and handle backend calls.
      NOTE: The frontend/backend server needs to be started first => a preLaunchTask starts the server.
      *** NOTE: This does NOT pre-compile the backend like ng e2e - the already-compiled front-end is used.  Thus the front end must be compiled using the e2e enviroment file if you want to run the cache or error test files (which rely on e2e environment settings) - run the npm script or the VSCode task that compiles with the e2e environment file.
      Choose .dev or .production configuration by editing args below - edit the .env files to select which spec files to run.
      VALID OPTIONS:
      - Compile ngBuild:e2e (which allows error and cache testing) and choose -dev conf file (which is configured to test against a local server and test cache and error testing).
      - Compile ngBuild:prod and choose -production conf file (which is configured to test against the GCP server and skip cache and error testing).  (You can use the other two compile types with this conf file without error).
      - Compile ngBuild:staging and choose -staging conf file (which is configured to test against a local server and skip cache and error testing). (You can use the other two compile types with this conf file without error).
      NOTE: You can run this against a deployed build by setting the BASE_URL below.
      */
      "name": "E2e frontend with backend",
      "type": "node",
      "request": "launch",
      "preLaunchTask": "Check Server",
      "postDebugTask": "Taskkill node.exe",
      "program": "${workspaceFolder}/frontend//node_modules/protractor/bin/protractor",
      "protocol": "inspector",
      "args": [
        /* Edit here to choose one of either -dev or -production configuration file . */
        "${workspaceFolder}/frontend/e2e/src/config/protractor-dev.conf.js",
        // "${workspaceFolder}/frontend/e2e/src/config/protractor-staging.conf.js",
        // "${workspaceFolder}/frontend/e2e/src/config/protractor-production.conf.js",
      ],
      "env": {
        /* can set the base-url to a specific deployed build */
        "BASE_URL": "http://localhost:8080"
        // "BASE_URL": "https://ci-test-dot-project-perform.appspot.com"
      },
      "cwd": "${workspaceFolder}/frontend",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // Run the backend server (index.ts).
    {
      "name": "Run backend index.js",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/backend/src/index.ts",
      "cwd": "${workspaceFolder}",
      "env": {
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": true,
    },
    // https://localhost:8080/
    {
      /* Starts Chrome and connects to the home page.
      The server is started in a prelaunch task. */
      "name": "Open http://localhost:8080/",
      "type": "chrome",
      "preLaunchTask": "Check Server",
      "postDebugTask": "Taskkill node.exe",
      "request": "launch",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "http://localhost:8080/",
      // tell vscode where to find scripts on the server
      "webRoot": "${workspaceFolder}/frontend/dist",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
        "/testServer": "${workspaceFolder}/backend/dist/test/client/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/frontend/*",
      },
      "smartStep": false,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
    },
    // Run Mocha backend tests
    {
      "name": "Run Mocha backend tests",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/models.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server.test.js",
        "${workspaceFolder}/backend/dist/src/test/index.test.js",
      ],
      "env": {
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // Run Mocha backend tests with Istanbul
    {
      "name": "Run Mocha backend tests with Istanbul",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/nyc/bin/nyc",
      "args": [
        "--nycrc-path", "./backend/.nycrc.json",
        "${workspaceFolder}/node_modules/mocha/bin/_mocha",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/*.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver.test.js",
        "${workspaceFolder}/backend/dist/src/test/index.test.js",

      ],
      "env": {
        /* need to enable DEBUG when using nyc (why?) */
        "DEBUG": "PP*",
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // Run Mocha client-fired server tests only.
    {
      /* This calls mocha to run one or two server-side test files.
      The test files set up some mocks to simulate errors and also event handlers to recive reports of test starts and completions from a browser.
      Chrome must then be started with a specific url that loads browser-side mocha scripts that test server functionality such as including error condition responses.
      The files start Chrome automatically if process.env.DISABLE_CHROME is false.  This does not allow for using VSCode for client-side debug.
      Otherwise (to allow using VSCODE for client-side debug) you can load the testServer/xxx-loadmocha.html file manually after running this on one file only, or, if you would like VSCode debug of the browser-side, then use a Chrome launch configuration to load the matching xxx-loadMocha.html - there are two xxx-loadmocha.html files - make sure you use the one that matches the server-side test file. */
      "name": "Run Mocha client-fired server tests",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js to load .env */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* Comment out to select the tests to run */
        // "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
      ],
      "env": {
        /* set to 'false' to automatically run chrome and set to 'true' to launch chrome manually */
        "DISABLE_CHROME": "true",
      },
      "cwd": "${workspaceFolder}",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // http://localhost:8080/testServer/xxx-loadMocha.html
    {
      /* Starts Chrome and loads one of two client-side browser test files. */
      /* The equivalent server-side test file must be started in advance of running this, (with automatic start of Chrome disabled). */
      /* Note: There are two xxx-loadmocha.html files - make sure you use the one that matches the server-side test file. */
      "name": "Open http://localhost:8080/testServer/xxx-loadMocha.html",
      "type": "chrome",
      "request": "launch",
      "linux": {
        "runtimeExecutable": "/usr/bin/google-chrome",
      },
      "windows": {
        "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      },
      "runtimeArgs": [
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "breakOnLoad": true, // set a breakpoint in the client-static test file before launch
      "userDataDir": true,
      /* NOTE: comment out to run a specific xxx-loadMocha*/
      // "url": "http://localhost:8080/testServer/api-loadMocha.html",
      "url": "http://localhost:8080/testServer/errors-loadMocha.html",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/testServer": "${workspaceFolder}/backend/src/test/client-static",
      },
      /* Note that sourceMapPathOverrides are not necessary as only loadmocha and the client-static test files are loaded directly. */
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
    },
    // Run current .js file
    {
      "type": "node",
      "request": "launch",
      "name": "Run the currently opened .js file",
      "program": "${file}",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
    },
    // Run current .ts file
    {
      "type": "node",
      "request": "launch",
      "name": "Run the currently opened .ts file",
      "cwd": "${workspaceFolder}",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "runtimeArgs": [
          "-r",
          "ts-node/register"
      ],
      "args": [
          "${file}",
      ],
      "env": {
        "TS_NODE_PROJECT": "tsconfig.json",
      },
    },


  ],
  "compounds": [
    /* Run backend server and browse to root */
    {
      /* To debug angular you may need to go into Chrome and set the first breakpoint. If you have difficulty setting breakpoints in vscode then use Chrome DevTools. */
      "name": "Backend/Frontend",
      "configurations": [
        "Run backend index.js",
        "Open http://localhost:8080/",
      ]
    },
  ],
}
