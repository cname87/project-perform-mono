{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    // Start frontend - use for frontend debug with watch
    {
      /*
      Runs npm run start.
      proxy.conf is configured in angular.json => backend server needs to be started first => started in the script.
      Close all open Chrome instances if Chrome won't start. */
      "name": "Start frontend",
      "type": "chrome",
      "request": "launch",
      "cwd": "${workspaceFolder}/frontend",
      "preLaunchTask": "npm start frontend",
      "url": "http://localhost:4200/", // proxy to 8080 for api calls
      "webRoot": "${workspaceFolder}",
      "sourceMapPathOverrides": {
      },
    },
    // Test frontend - use for frontend unit test debug
    {
      /*
      Runs 'npm run test, i.e. ng test, first which compiles the front end and opens chrome and connects to the Karma runner, and THEN starts Chrome again and connects to the Karma runner.  Debug should work on the second session.
      Run 'npm run test' manually first if problems with preLaunch task.
      Close all open Chrome instances if Chrome won't start.
       */
      "name": "Test frontend",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm test frontend",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "cwd": "${workspaceFolder}/frontend",
      "userDataDir":true,
      "url": "http://localhost:9876/debug.html",
      "webRoot": "${workspaceFolder}/frontend/dist/",
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
      },
      "sourceMapPathOverrides": {
        "./*": "${workspaceFolder}/frontend/*",
        "webpack:///./*": "${workspaceFolder}/frontend/*",
      },
      "sourceMaps": true,
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // Test e2e frontend - use for frontend e2e test debug
    {
      /*
      Runs npm run e2e.
      baseUrl is configured in protractor.conf to be localhost:8080
      backend server needs to be started first => started in script.
       */
      "name": "Test e2e frontend",
      "type": "node",
      "request": "launch",
      "program": "${workspaceFolder}/frontend//node_modules/protractor/bin/protractor",
      "protocol": "inspector",
      "args": [
        /* choose which spec files to run in protractor.conf.js */
        "${workspaceFolder}/frontend/e2e/protractor.conf.js",
      ],
      "cwd": "${workspaceFolder}/frontend/e2e",
      "preLaunchTask": "Check Server",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "sourceMapPathOverrides": {
        "./*": "${workspaceFolder}/frontend/*",
        "webpack:///./*": "${workspaceFolder}/frontend/*",
      },
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/frontend/node_modules/**/*",
        "${workspaceFolder}/frontend/node_modules/**/*.js",
      ],
    },
    // Run backend server index.js
    {
      "type": "node",
      "request": "launch",
      "name": "Run backend index.js",
      "program": "${workspaceFolder}/backend/src/index.ts",
      "cwd": "${workspaceFolder}/backend",
      "env": {
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": true,
    },
    // npm run server index.js
    {
      /* Runs an npm script to start index.js.
      Note that CTRL+C does not exit without manual intervention.
      Click on the VSCode 'stop' icon to exit without manual intervention
      */
      "type": "node",
      "request": "launch",
      "name": "Launch npm backend index.js",
      "runtimeExecutable": "npm",
      "runtimeArgs": [
        "run-script",
        "debug",
        "--silent"
      ],
      "port": 9229,
      "cwd": "${workspaceFolder}/backend",
      "env": {},
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js"
      ],
      "smartStep": false,
    },
    // https://localhost:8080/
    {
      // starts Chrome and connect to the home page
      // the server must be started in advance of running this
      "name": "Open http://localhost:8080/",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        // "--remote-debugging-port=9222",
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
        "--disable-application-cache",
        "--media-cache-size=1",
        "--disk-cache-size=1"
      ],
      "userDataDir": true,
      "url": "http://localhost:8080/",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
        "/testServer": "${workspaceFolder}/backend/dist/test/client/",
      },
      "sourceMapPathOverrides": {
        "webpack:///./node_modules/*": "${workspaceFolder}/frontend/node_modules/*",
        // "webpack:///./~/*": "${workspaceFolder}/frontend/node_modules/*",
        "webpack:///./*": "${workspaceFolder}/frontend/*",
        "webpack:///*": "frontend/*",
        "webpack:///src/*": "${workspaceFolder}/frontend/src*",
      },
      "smartStep": false,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
      "trace": true,
    },
    // Mocha backend tests
    {
      "type": "node",
      "request": "launch",
      "name": "Run Mocha backend tests",
      "program": "${workspaceFolder}/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/*.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver-test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server-test.js",
        "${workspaceFolder}/backend/dist/src/test/index-test.js",
      ],
      "env": {
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // kill any failed node runs
      // "postDebugTask": "",
    },
    // Mocha backend tests with Istanbul
    {
      "type": "node",
      "request": "launch",
      "name": "Run Mocha backend tests with Istanbul",
      "program": "${workspaceFolder}/node_modules/nyc/bin/nyc",
      "args": [
        "--nycrc-path", "./backend/.nycrc.json",
        "${workspaceFolder}/node_modules/mocha/bin/_mocha",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select tests */
        "${workspaceFolder}/backend/dist/src/database/test/startDatabase.test.js",
        "${workspaceFolder}/backend/dist/src/database/test/database.test.js",
        "${workspaceFolder}/backend/dist/src/models/test/*.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/dumpError.test.js",
        "${workspaceFolder}/backend/dist/src/utils/test/logger.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
        "${workspaceFolder}/backend/dist/src/server/test/server-test.js",
        "${workspaceFolder}/backend/dist/src/server/test/startserver-test.js",
        "${workspaceFolder}/backend/dist/src/test/index-test.js",

      ],
      "env": {
        /* need to enable DEBUG when using nyc (why?) */
        "DEBUG": "PP*",
        /* set to 'false' (or omit) to automatically run chrome and set to 'true' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // kill any failed node runs
      // "postDebugTask": "",
    },
    // Mocha client-fired server tests - use in compound for client-side debug
    {
      /* This runs a server-side mocha client test file to test the server-side behaviour during client-side fired tests. */
      /* If DISABLE_CHROME is set false it kicks off the browser tests that fire the client-side tests.  Otherwise you can load testServer/loadmocha.html manually after running this, or if you need debug of the browser-side then use a launch configuration to load the matching loadMocha.html. */
      /* Note: Make sure you use the correct matching file */
      /* A compound configuration is set up for use when debugging client-side test scripts */
      "type": "node",
      "request": "launch",
      "name": "Run server and start Mocha client-fired tests",
      "program": "${workspaceFolder}/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        /* include testSetup.js to load .env */
        "${workspaceFolder}/backend/dist/src/test/testSetup.js",
        /* comment out files to select a test */
        // "${workspaceFolder}/backend/dist/src/controllers/test/api-controller.test.js",
        "${workspaceFolder}/backend/dist/src/controllers/test/errors-controller.test.js",
      ],
      "env": {
        /* set to 'true' to automatically run chrome and set to 'false' when using a compound configuration to launch chrome manually */
        "DISABLE_CHROME": "false",
      },
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
    },
    // http://localhost:8080/testServer/xxx/loadMocha.html
    {
      /* starts Chrome and loads the a client-side browser test runner */
      /* the equivalent server-side client tests (with Run Chrome disabled) must be started in advance of running this */
      /* make sure you use the correct matching file */
      "name": "Open http://localhost:8080/testServer/xxx/loadMocha.html",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      /* comment out to run a specific loadMocha*/
      "url": "http://localhost:8080/testServer/api-loadmocha.html",
      // "url": "http://localhost:8080/testServer/errors-loadmocha.html",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/frontend/dist/",
        "/testServer": "${workspaceFolder}/backend/dist/server/test/client",
      },
      "sourceMapPathOverrides": {
        "webpack:///./~/*": "${workspaceFolder}/frontend/node_modules/*",
        "webpack:///./*": "${workspaceFolder}/frontend/*",
        "webpack:///*": "frontend/*",
        "webpack:///src/*": "${workspaceFolder}/frontend/src*",
      },
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
      "trace": true,
    },
    // current .js file
    {
      "type": "node",
      "request": "launch",
      "name": "Launch the currently opened .js file",
      "program": "${file}",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/node_modules/**/*",
        "${workspaceFolder}/node_modules/**/*.js",
      ],
    },
    // current .ts file
    {
      "type": "node",
      "request": "launch",
      "name": "Launch the currently opened .ts file",
      "cwd": "${workspaceFolder}/backend",
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "runtimeArgs": [
          "-r",
          "ts-node/register"
      ],
      "args": [
          "${file}",
      ],
      "env": {
        "TS_NODE_PROJECT": "tsconfig.json",
      },
    },


  ],
  "compounds": [
    /* Run backend server and browse to root */
    {
      /* To debug angular you may need to go into Chrome and ensure filesystem added. If you have difficulty setting breakpoints in vscode then set them in Chrome. */
      "name": "Backend/Frontend",
      "configurations": [
        "Run backend index.js",
        "Open http://localhost:8080/",
      ]
    },
    /* Run backend server and ng serve - debug frontend with watch */
    {
      /* relies on ng serve taking some time.  If it has previously been launched and is still running in the background then the browser will start too fast for the server => refresh the browser */
      "name": "Backend/ng serve",
      "configurations": [
        "Run backend index.js",
        "Start frontend",
      ]
    },
    /* Run backend server and ng e2e - debug e2e */
    {
      /* relies on Is ServerUp in 'ng e2e' launch to hold browser start until the server is up */
      "name": "Backend/ng e2e",
      "configurations": [
        "Run backend index.js",
        "Test e2e frontend",
      ]
    },
    /* Mocha client tests backend/frontend */
    /* Useful for debugging client-side test scripts */
    {
      "name": "Mocha client tests Backend/Frontend",
      /* use when debugging client-side mocha scripts */
      /* You must set DISABLE_CHROME to 'false' and disable Taskkill on Mocha Client-fired server Tests before running this */
      /* you must close Chrome manually afterwards */
      /* you must match the tests in both configurations below */
      "configurations": [
        "Run server and start Mocha client-fired tests",
        "Open http://localhost:8080/testServer/xxx/loadMocha.html",
      ]
    },
  ],
}
