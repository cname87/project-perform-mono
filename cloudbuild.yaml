steps:

 # NOTE: When a build is executed from GCP via a github trigger the secret files, and any empty directories, are not there => download from GCP Storage.  The structure of the storage bucket MUST match the expected destination of the files including directory structure as a recursive copy is carried out to copy the directory structure and files.
- id: 'download environment and certs files'
# copy backend .env, frontend e2e .env, database certs, & GCP Storage key files from GCP Storage to persisted workspace
  name: 'gcr.io/cloud-builders/gsutil'
  dir: '.'
  args: [
    '-m', 'cp', '-r', '-n',
    'gs://project-perform-gcp-environment-files/*',
    './',
  ]

- id: 'install backend node_modules'
# install the backend node_modules directory in the persisted workspace
  name: node:12.13.0
  entrypoint: npm
  args: ['install']

- id: 'install frontend node_modules'
# install the backend node_modules directory in the persisted workspace
  name: node:12.13.0
  entrypoint: npm
  dir: './frontend'
  args: ['install']

- id: 'build backend'
# build the backend in the persisted workspace (replacing the copied in dist files - the built files are deployed)
  name: node:12.13.0
  entrypoint: npm
  args: ['run', 'build']
  # signal that download from GCP Storage not required
  env:
    - 'IS_GCP_BUILD=true'

- id: 'build frontend'
# build the frontend in the persisted workspace (replacing the copied in dist files - the built files are deployed)
  name: node:12.13.0
  entrypoint: npm
  dir: './frontend'
  args: ['run', 'build:prod']
  # signal that download from GCP Storage not required
  env:
    - 'IS_GCP_BUILD=true'

- id: 'build backend and frontend'
# build an image with node and puppeteer that can be used for unit test and also in docker-compose to start the server in the background
# see Dockerfile for detail - simply copies in context and exposes a port
  name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '--tag=gcr.io/$PROJECT_ID/application',
    '--cache-from=gcr.io/$PROJECT_ID/application',
    '.',
  ]

- id: 'unit test backend'
# run all backend unit tests
# must use an image with node & puppeteer
  name: 'gcr.io/$PROJECT_ID/application'
  env: ['NODE_ENV=staging']
  args: ['npm', 'run', 'test']

- id: 'unit test frontend'
# run all frontend unit tests
# must use an image with node & puppeteer
  name: 'gcr.io/$PROJECT_ID/application'
  dir: './frontend'
  args: ['npm', 'run', 'test:staging']

- id: 'run backend server'
# run the backend server in the background using docker-compose
# server is run with NODE_ENV=staging => TEST_PATHS available
# NOTE: could add a step to ping server and check it's up
  name: 'docker/compose'
  args: ['up', '-d']

- id: 'e2e test in build environment'
# run the frontend e2e using e2e:staging => runs a fresh compile with the environment.e2e file => e2e environment parameters available
# backend is running already with TEST_PATHs available
  name: 'gcr.io/$PROJECT_ID/application'
  dir: './frontend'
  args: ['npm', 'run', 'e2e:staging']

- id: 'deploy build for e2e test'
# deploys using the frontend and backend that are built
# frontend production build (=> e2e environment parameters not set)
# (backend build has only one type)
# (app engine runs using NODE_ENV=production so production database in use)
# note: this will overwrite any previously build deployed using this step
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'deploy',
    '--no-promote',
    '--version=ci-test',
  ]
  timeout: '600s'

- id: 'e2e test the test build'
# runs e2e test against the newly deployed build
# does not use ng e2e => frontend production build from image => e2e environment parameters not available => no cache or errors test
# backend runs with NODE_ENV=production => no TEST_PATHS and production database in use
  name: 'gcr.io/$PROJECT_ID/application'
  dir: './frontend'
  env: ['BASE_URL=https://ci-test-dot-$PROJECT_ID.appspot.com']
  args: ['npm', 'run', 'e2e:production']

- id: 'deploy build for go-live but no-promote'
# deploys using the frontend and backend that are built
# frontend production build (=> e2e environment parameters not set)
# (backend build has only one type)
# (app engine runs using NODE_ENV=production so production database in use)
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'deploy',
    '--no-promote',
    '--version=ci-live-$SHORT_SHA',
  ]
  timeout: '600s'

- id: 'promote go-live build'
# promotes the newly deployed build so it takes all traffic
  name: 'gcr.io/cloud-builders/gcloud'
  args: [
    'app',
    'versions',
    'migrate',
    'ci-live-$SHORT_SHA',
  ]
  timeout: '600s'

- id: 'e2e test the promoted go-live build'
# runs e2e test against the newly promoted build
# does not use ng e2e => frontend production build from image => e2e environment parameters not available => no cache or errors test
# backend runs with NODE_ENV=production => no TEST_PATHS and production database in use
  name: 'gcr.io/$PROJECT_ID/application'
  dir: './frontend'
  args: ['npm', 'run', 'e2e:production']

options:
  machineType: 'N1_HIGHCPU_32'

timeout: 1800s

images: ['gcr.io/$PROJECT_ID/application']
